int LongestBitonicSequence(vector<int>nums)
	{
	    int n = nums.size();
	    int dp1[n],dp2[n];
	    
	    for(int i=0;i<n;i++)
	    {
	        dp1[i] = 1;
	        dp2[i] = 1;
	    }
	    
	    // longest increaing subsequence from left
	    for(int i=1;i<n;i++)
	    {
	        for(int j=0;j<i;j++)
	        {
	            if(nums[j]<nums[i])
	                dp1[i] = max(dp1[i],dp1[j]+1);
	        }
	    }
	    
	    // longest increaing subsequence from right
	    for(int i=n-2;i>=0;i--)
	    {
	        for(int j=i+1;j<n;j++)
	        {
	            if(nums[j]<nums[i])
	                dp2[i] = max(dp2[i],dp2[j]+1);
	        }
	    }
	    
	    int ans=0;
	    for(int i=0;i<n;i++)
	    {
	        ans = max(ans,dp1[i]+dp2[i]-1);
	    }
	    
	    return ans;
	    
	    
	}
